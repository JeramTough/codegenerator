package ${package.Controller};

#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
import ${dtoPackage}.${table.entityName}Dto;
import ${paramsPackage}.AddOrUpdate${table.entityName}Params;
import ${paramsPackage}.${table.entityName}ConditionParams;
import ${package.Service}.${table.serviceName};
import com.jeramtough.jtweb.component.apiresponse.bean.CommonApiResponse;
import com.jeramtough.jtweb.model.dto.PageDto;
import com.jeramtough.jtweb.model.params.DeleteByIdsParams;
import com.jeramtough.jtweb.model.params.QueryByPageParams;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import java.util.List;

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Api(tags = {"#if(${package.ModuleName})${package.ModuleName}#end#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end-API"})
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} extends MyBaseController{
#end
    private final ${table.serviceName}  thisService;

    @Autowired
    public ${table.controllerName}(${table.serviceName} thisService) {
        this.thisService = thisService;
    }

    @ApiOperation(value = "新增", notes = "新增")
    @RequestMapping(value = "/add", method = {RequestMethod.POST})
    public CommonApiResponse<${table.entityName}Dto> add(
        @RequestBody AddOrUpdate${table.entityName}Params params) {
        return getSuccessfulApiResponse(thisService.addDataByParams(params));
    }

    @ApiOperation(value = "更新", notes = "更新")
    @RequestMapping(value = "/update", method = {RequestMethod.POST})
    public CommonApiResponse<String> update(
        @RequestBody AddOrUpdate${table.entityName}Params params) {
        return getSuccessfulApiResponse(thisService.updateDataByParams(params));
    }

    @ApiOperation(value = "删除", notes = "删除")
        @RequestMapping(value = "/delete", method = {RequestMethod.POST})
    public CommonApiResponse<Boolean> delete(@RequestBody DeleteByIdsParams params) {
        return getSuccessfulApiResponse(thisService.removeByIds(params.getIds()));
    }

    @ApiOperation(value = "分页查询", notes = "分页查询")
    @RequestMapping(value = "/page", method = {RequestMethod.GET})
    public CommonApiResponse<PageDto<${table.entityName}Dto>> page(
        QueryByPageParams queryByPageParams, ${table.entityName}ConditionParams conditionParams) {
        return getSuccessfulApiResponse(
        thisService.pageByCondition(queryByPageParams, conditionParams));
    }

    @ApiOperation(value = "列表查询", notes = "列表查询")
    @RequestMapping(value = "/list", method = {RequestMethod.GET})
    public CommonApiResponse<List<${table.entityName}Dto>> list( ${table.entityName}ConditionParams conditionParams) {
        return getSuccessfulApiResponse(
        thisService.listByCondition(conditionParams));
    }


}

#end